@page "/usuarios"
@using Biblioteca.API.Clients
@using Biblioteca.DTOs
@inject UsuarioApiClient UsuarioClient
@inject PersonaApiClient PersonaClient
@inject IJSRuntime JSRuntime
@inject IAuthService Auth

<PageTitle>Usuarios</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2><i class="fas fa-users"></i> Gestión de Usuarios</h2>
                @if (canCreate)
                {
                    <button class="btn btn-info" @onclick="AbrirModalAgregar">
                        <i class="fas fa-plus"></i> Nuevo Usuario
                    </button>
                }
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border text-info" role="status">
                <span class="visualmente-hidden">Cargando...</span>
            </div>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            <i class="fas fa-exclamation-triangle"></i> @errorMessage
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <div class="row">
                            <div class="col-md-6">
                                <h5 class="mb-0">Lista de Usuarios</h5>
                            </div>
                            <div class="col-md-6">
                                <div class="input-group">
                                    <input type="text" class="form-control" placeholder="Buscar usuario..." @bind="searchText" @onkeypress="OnSearchKeyPress" />
                                    <button class="btn btn-outline-secondary" @onclick="BuscarUsuarios">
                                        <i class="fas fa-search"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="card-body p-0">
                        @if (usuarios?.Any() == true)
                        {
                            <div class="table-responsive">
                                <table class="table table-hover mb-0">
                                    <thead class="table-dark">
                                        <tr>
                                            <th>ID</th>
                                            <th>Usuario</th>
                                            <th>Nombre Completo</th>
                                            <th>DNI</th>
                                            <th>Email</th>
                                            <th>Rol</th>
                                            <th class="text-center">Acciones</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var usuario in usuarios)
                                        {
                                            <tr>
                                                <td>@usuario.Id</td>
                                                <td>@usuario.NombreUsuario</td>
                                                <td>@usuario.PersonaNombreCompleto</td>
                                                <td>@(personas?.FirstOrDefault(p => p.Id == usuario.PersonaId)?.Dni ?? "N/A")</td>
                                                <td>@(personas?.FirstOrDefault(p => p.Id == usuario.PersonaId)?.Email ?? "N/A")</td>
                                                <td>
                                                    <span class="badge @(usuario.Rol == "bibliotecario" ? "bg-primary" : usuario.Rol == "administrador" ? "bg-dark" : "bg-success")">
                                                        @usuario.Rol
                                                    </span>
                                                </td>
                                                <td class="text-center">
                                                    @if (canEdit)
                                                    {
                                                        <button class="btn btn-sm btn-outline-info me-1" @onclick="() => AbrirModalEditar(usuario)">
                                                            <i class="fas fa-edit"></i>
                                                        </button>
                                                    }
                                                    @if (canDelete)
                                                    {
                                                        <button class="btn btn-sm btn-outline-danger" @onclick="() => EliminarUsuario(usuario)">
                                                            <i class="fas fa-trash"></i>
                                                        </button>
                                                    }
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <div class="text-center p-4">
                                <i class="fas fa-users fa-3x text-muted mb-3"></i>
                                <p class="text-muted">No hay usuarios para mostrar</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="position-fixed top-0 end-0 p-3" style="z-index: 1050">
            <div class="toast show" role="alert">
                <div class="toast-header bg-info text-white">
                    <i class="fas fa-check-circle me-2"></i>
                    <strong class="me-auto">Éxito</strong>
                    <button type="button" class="btn-close btn-close-white" @onclick="() => successMessage = string.Empty"></button>
                </div>
                <div class="toast-body">
                    @successMessage
                </div>
            </div>
        </div>
    }
</div>

<!-- Modal para Agregar/Editar Usuario -->
@if (showModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        @if (usuarioActual?.Id == 0)
                        {
                            <i class="fas fa-plus"></i> <text>Nuevo Usuario</text>
                        }
                        else
                        {
                            <i class="fas fa-edit"></i> <text>Editar Usuario</text>
                        }
                    </h5>
                    <button type="button" class="btn-close" @onclick="CerrarModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="usuarioActual" OnValidSubmit="GuardarUsuario">
                        <DataAnnotationsValidator />
                        
                        <div class="card mb-3">
                            <div class="card-header bg-light">
                                <strong>Datos Personales</strong>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label class="form-label">Nombre *</label>
                                            <InputText class="form-control" @bind-Value="personaActual.Nombre" />
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label class="form-label">Apellido *</label>
                                            <InputText class="form-control" @bind-Value="personaActual.Apellido" />
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label class="form-label">DNI *</label>
                                            <InputText class="form-control" @bind-Value="personaActual.Dni" />
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label class="form-label">Email *</label>
                                            <InputText class="form-control" type="email" @bind-Value="personaActual.Email" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="card">
                            <div class="card-header bg-light">
                                <strong>Datos de Usuario</strong>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label class="form-label">Nombre de Usuario *</label>
                                            <InputText class="form-control" @bind-Value="usuarioActual.NombreUsuario" />
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        @if (usuarioActual.Id == 0 && canCreate)
                                        {
                                            <div class="mb-3">
                                                <label class="form-label">Clave *</label>
                                                <InputText class="form-control" type="password" @bind-Value="passwordInput" />
                                                <div class="form-text">Mínimo 6 caracteres.</div>
                                            </div>
                                        }
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="mb-3">
                                            <label class="form-label">Rol *</label>
                                            <InputSelect class="form-select" @bind-Value="usuarioActual.Rol">
                                                @if (isBibliotecario)
                                                {
                                                    <option value="socio">Socio</option>
                                                }
                                                else
                                                {
                                                    <option value="">Seleccionar rol...</option>
                                                    <option value="socio">Socio</option>
                                                    <option value="bibliotecario">Bibliotecario</option>
                                                    <option value="administrador">Administrador</option>
                                                }
                                            </InputSelect>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="modal-footer px-0 pb-0 mt-3">
                            <button type="button" class="btn btn-secondary" @onclick="CerrarModal">Cancelar</button>
                            @if ((usuarioActual?.Id ?? 0) == 0 ? canCreate : canEdit)
                            {
                                <button type="submit" class="btn btn-info" disabled="@isProcessing">
                                    @if (isProcessing)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2"></span>
                                    }
                                    Guardar
                                </button>
                            }
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<UsuarioDto>? usuarios;
    private List<PersonaDto>? personas;
    private UsuarioDto usuarioActual = new();
    private PersonaDto personaActual = new();
    private string passwordInput = string.Empty;
    private bool showModal = false;
    private bool isLoading = true;
    private bool isProcessing = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private string searchText = string.Empty;

    private bool canCreate, canEdit, canDelete;
    private bool isBibliotecario = false;
    private bool isAdmin = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadRoleAsync();
        canCreate = await Auth.HasPermissionAsync("usuarios.agregar");
        canEdit = await Auth.HasPermissionAsync("usuarios.actualizar");
        canDelete = await Auth.HasPermissionAsync("usuarios.eliminar");
        await CargarDatos();
    }

    private async Task LoadRoleAsync()
    {
        try
        {
            var token = await Auth.GetTokenAsync();
            if (string.IsNullOrEmpty(token)) return;
            var parts = token.Split('.');
            if (parts.Length < 2) return;
            var payload = parts[1].Replace('-', '+').Replace('_', '/');
            switch (payload.Length % 4)
            {
                case 2: payload += "=="; break;
                case 3: payload += "="; break;
            }
            var json = System.Text.Encoding.UTF8.GetString(Convert.FromBase64String(payload));
            using var doc = System.Text.Json.JsonDocument.Parse(json);
            var root = doc.RootElement;

            string[] roleKeys = new[] { "http://schemas.microsoft.com/ws/2008/06/identity/claims/role", "role", "roles" };
            foreach (var key in roleKeys)
            {
                if (root.TryGetProperty(key, out var roleEl))
                {
                    if (roleEl.ValueKind == System.Text.Json.JsonValueKind.Array)
                    {
                        foreach (var item in roleEl.EnumerateArray())
                        {
                            var r = item.GetString()?.ToLowerInvariant();
                            if (r == "administrador") isAdmin = true;
                            if (r == "bibliotecario") isBibliotecario = true;
                        }
                    }
                    else if (roleEl.ValueKind == System.Text.Json.JsonValueKind.String)
                    {
                        var r = roleEl.GetString()?.ToLowerInvariant();
                        if (r == "administrador") isAdmin = true;
                        if (r == "bibliotecario") isBibliotecario = true;
                    }
                }
            }
        }
        catch { }
    }

    private async Task CargarDatos()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            
            await CargarUsuarios();
            await CargarPersonas();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar datos: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task CargarUsuarios()
    {
        usuarios = (await UsuarioClient.GetAllAsync()).ToList();
    }

    private async Task CargarPersonas()
    {
        personas = (await PersonaClient.GetAllAsync()).ToList();
    }

    private async Task BuscarUsuarios()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            
            if (string.IsNullOrWhiteSpace(searchText))
            {
                await CargarUsuarios();
            }
            else
            {
                usuarios = (await UsuarioClient.GetByCriteriaAsync(searchText)).ToList();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al buscar usuarios: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task OnSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await BuscarUsuarios();
        }
    }

    private void AbrirModalAgregar()
    {
        usuarioActual = new UsuarioDto { Id = 0, NombreUsuario = string.Empty, Rol = isBibliotecario ? "socio" : "socio" };
        personaActual = new PersonaDto { Id = 0, Nombre = string.Empty, Apellido = string.Empty, Dni = string.Empty, Email = string.Empty };
        passwordInput = string.Empty;
        errorMessage = string.Empty;
        showModal = true;
    }

    private async Task AbrirModalEditar(UsuarioDto usuario)
    {
        usuarioActual = new UsuarioDto 
        { 
            Id = usuario.Id, 
            NombreUsuario = usuario.NombreUsuario,
            Rol = usuario.Rol,
            PersonaId = usuario.PersonaId
        };

        var persona = await PersonaClient.GetByIdAsync(usuario.PersonaId);
        if (persona != null)
        {
            personaActual = persona;
        }
        passwordInput = string.Empty;
        errorMessage = string.Empty;
        showModal = true;
    }

    private void CerrarModal()
    {
        showModal = false;
        usuarioActual = new();
        personaActual = new();
        passwordInput = string.Empty;
    }

    private async Task GuardarUsuario()
    {
        try
        {
            isProcessing = true;
            errorMessage = string.Empty;

            if ((usuarioActual?.Id ?? 0) == 0 && !canCreate) { errorMessage = "No tiene permisos para crear usuarios."; return; }
            if ((usuarioActual?.Id ?? 0) != 0 && !canEdit) { errorMessage = "No tiene permisos para actualizar usuarios."; return; }

            // Validaciones mínimas
            if (string.IsNullOrWhiteSpace(usuarioActual.NombreUsuario)) { errorMessage = "El nombre de usuario es requerido."; return; }
            if (string.IsNullOrWhiteSpace(usuarioActual.Rol)) { errorMessage = "El rol es requerido."; return; }
            if (string.IsNullOrWhiteSpace(personaActual.Nombre) || string.IsNullOrWhiteSpace(personaActual.Apellido)) { errorMessage = "Nombre y Apellido son requeridos."; return; }
            if (string.IsNullOrWhiteSpace(personaActual.Dni)) { errorMessage = "El DNI es requerido."; return; }
            if (string.IsNullOrWhiteSpace(personaActual.Email)) { errorMessage = "El Email es requerido."; return; }

            // Restringir creación por bibliotecario según reglas del backend
            if (isBibliotecario && (usuarioActual.Rol.Equals("bibliotecario", StringComparison.OrdinalIgnoreCase) || usuarioActual.Rol.Equals("administrador", StringComparison.OrdinalIgnoreCase)))
            {
                errorMessage = "Un bibliotecario no puede crear usuarios con rol Bibliotecario o Administrador.";
                return;
            }

            if (usuarioActual.Id == 0)
            {
                if (string.IsNullOrWhiteSpace(passwordInput) || passwordInput.Length < 6)
                {
                    errorMessage = "La clave es requerida y debe tener al menos 6 caracteres.";
                    return;
                }

                // Chequear nombre de usuario duplicado para mensaje claro
                var coincidencias = await UsuarioClient.GetByCriteriaAsync(usuarioActual.NombreUsuario);
                if (coincidencias.Any(u => string.Equals(u.NombreUsuario, usuarioActual.NombreUsuario, StringComparison.OrdinalIgnoreCase)))
                {
                    errorMessage = $"Ya existe un usuario con el nombre '{usuarioActual.NombreUsuario}'.";
                    return;
                }

                // Reutilizar persona por DNI si ya existe
                var existentes = await PersonaClient.GetByCriteriaAsync(personaActual.Dni);
                var coincidente = existentes.FirstOrDefault(p => string.Equals(p.Dni, personaActual.Dni, StringComparison.OrdinalIgnoreCase));
                int personaId;
                if (coincidente != null)
                {
                    // Validar que no tenga ya usuario
                    var usuariosAll = usuarios ?? (await UsuarioClient.GetAllAsync()).ToList();
                    if (usuariosAll.Any(u => u.PersonaId == coincidente.Id))
                    {
                        errorMessage = "La persona indicada ya tiene un usuario asociado.";
                        return;
                    }
                    personaId = coincidente.Id;
                }
                else
                {
                    var crearPersonaDto = new CrearPersonaDto
                    {
                        Nombre = personaActual.Nombre,
                        Apellido = personaActual.Apellido,
                        Dni = personaActual.Dni,
                        Email = personaActual.Email
                    };
                    var personaCreada = await PersonaClient.CreateAsync(crearPersonaDto);
                    personaId = personaCreada.Id;
                }

                var crearUsuarioDto = new CrearUsuarioDto
                {
                    NombreUsuario = usuarioActual.NombreUsuario,
                    Clave = passwordInput,
                    Rol = usuarioActual.Rol,
                    PersonaId = personaId
                };
                await UsuarioClient.CreateAsync(crearUsuarioDto);
                successMessage = "Usuario creado exitosamente";
            }
            else
            {
                await PersonaClient.UpdateAsync(personaActual);
                usuarioActual.PersonaId = personaActual.Id;
                await UsuarioClient.UpdateAsync(usuarioActual);
                successMessage = "Usuario actualizado exitosamente";
            }

            CerrarModal();
            await CargarDatos();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al guardar usuario: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task EliminarUsuario(UsuarioDto usuario)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "¿Está seguro de que desea eliminar este usuario?");
        if (!confirmed) return;

        try
        {
            await UsuarioClient.DeleteAsync(usuario.Id);
            await PersonaClient.DeleteAsync(usuario.PersonaId);
            
            successMessage = "Usuario eliminado exitosamente";
            await CargarDatos();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al eliminar usuario: {ex.Message}";
        }
    }
}
