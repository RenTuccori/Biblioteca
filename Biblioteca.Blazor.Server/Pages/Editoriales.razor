@page "/editoriales"
@using Biblioteca.API.Clients
@using Biblioteca.DTOs
@inject EditorialApiClient EditorialClient
@inject IJSRuntime JSRuntime
@inject IAuthService Auth

<PageTitle>Editoriales</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2><i class="fas fa-building"></i> Gestión de Editoriales</h2>
                @if (canCreate)
                {
                    <button class="btn btn-info" @onclick="AbrirModalAgregar">
                        <i class="fas fa-plus"></i> Nueva Editorial
                    </button>
                }
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border text-info" role="status">
                <span class="visualmente-hidden">Cargando...</span>
            </div>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            <i class="fas fa-exclamation-triangle"></i> @errorMessage
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <div class="row">
                            <div class="col-md-6">
                                <h5 class="mb-0">Lista de Editoriales</h5>
                            </div>
                            <div class="col-md-6">
                                <div class="input-group">
                                    <input type="text" class="form-control" placeholder="Buscar editorial..." @bind="searchText" @onkeypress="OnSearchKeyPress" />
                                    <button class="btn btn-outline-secondary" @onclick="BuscarEditoriales">
                                        <i class="fas fa-search"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="card-body p-0">
                        @if (editoriales?.Any() == true)
                        {
                            <div class="table-responsive">
                                <table class="table table-hover mb-0">
                                    <thead class="table-dark">
                                        <tr>
                                            <th>ID</th>
                                            <th>Nombre</th>
                                            <th class="text-center">Acciones</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var editorial in editoriales)
                                        {
                                            <tr>
                                                <td>@editorial.Id</td>
                                                <td>@editorial.Nombre</td>
                                                <td class="text-center">
                                                    @if (canEdit)
                                                    {
                                                        <button class="btn btn-sm btn-outline-info me-1" @onclick="() => AbrirModalEditar(editorial)">
                                                            <i class="fas fa-edit"></i>
                                                        </button>
                                                    }
                                                    @if (canDelete)
                                                    {
                                                        <button class="btn btn-sm btn-outline-danger" @onclick="() => EliminarEditorial(editorial.Id)">
                                                            <i class="fas fa-trash"></i>
                                                        </button>
                                                    }
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <div class="text-center p-4">
                                <i class="fas fa-building fa-3x text-muted mb-3"></i>
                                <p class="text-muted">No hay editoriales para mostrar</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="position-fixed top-0 end-0 p-3" style="z-index: 1050">
            <div class="toast show" role="alert">
                <div class="toast-header bg-info text-white">
                    <i class="fas fa-check-circle me-2"></i>
                    <strong class="me-auto">Éxito</strong>
                    <button type="button" class="btn-close btn-close-white" @onclick="() => successMessage = string.Empty"></button>
                </div>
                <div class="toast-body">
                    @successMessage
                </div>
            </div>
        </div>
    }
</div>

<!-- Modal para Agregar/Editar Editorial -->
@if (showModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        @if (editorialActual?.Id == 0)
                        {
                            <i class="fas fa-plus"></i> <text>Nueva Editorial</text>
                        }
                        else
                        {
                            <i class="fas fa-edit"></i> <text>Editar Editorial</text>
                        }
                    </h5>
                    <button type="button" class="btn-close" @onclick="CerrarModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="editorialActual" OnValidSubmit="GuardarEditorial">
                        <DataAnnotationsValidator />
                        
                        <div class="mb-3">
                            <label class="form-label">Nombre *</label>
                            <InputText class="form-control" @bind-Value="editorialActual.Nombre" />
                            <ValidationMessage For="@(() => editorialActual.Nombre)" class="text-danger" />
                        </div>

                        <div class="modal-footer px-0 pb-0">
                            <button type="button" class="btn btn-secondary" @onclick="CerrarModal">Cancelar</button>
                            @if ((editorialActual?.Id ?? 0) == 0 ? canCreate : canEdit)
                            {
                                <button type="submit" class="btn btn-info" disabled="@isProcessing">
                                    @if (isProcessing)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2"></span>
                                    }
                                    Guardar
                                </button>
                            }
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<EditorialDto>? editoriales;
    private EditorialDto editorialActual = new();
    private bool showModal = false;
    private bool isLoading = true;
    private bool isProcessing = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private string searchText = string.Empty;

    private bool canCreate, canEdit, canDelete;

    protected override async Task OnInitializedAsync()
    {
        canCreate = await Auth.HasPermissionAsync("editoriales.agregar");
        canEdit = await Auth.HasPermissionAsync("editoriales.actualizar");
        canDelete = await Auth.HasPermissionAsync("editoriales.eliminar");
        await CargarEditoriales();
    }

    private async Task CargarEditoriales()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            editoriales = (await EditorialClient.GetAllAsync()).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar editoriales: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task BuscarEditoriales()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            
            if (string.IsNullOrWhiteSpace(searchText))
            {
                await CargarEditoriales();
            }
            else
            {
                editoriales = (await EditorialClient.GetByCriteriaAsync(searchText)).ToList();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al buscar editoriales: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task OnSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await BuscarEditoriales();
        }
    }

    private void AbrirModalAgregar()
    {
        editorialActual = new EditorialDto { Id = 0, Nombre = string.Empty };
        showModal = true;
    }

    private void AbrirModalEditar(EditorialDto editorial)
    {
        editorialActual = new EditorialDto 
        { 
            Id = editorial.Id, 
            Nombre = editorial.Nombre
        };
        showModal = true;
    }

    private void CerrarModal()
    {
        showModal = false;
        editorialActual = new();
    }

    private async Task GuardarEditorial()
    {
        try
        {
            isProcessing = true;
            errorMessage = string.Empty;

            if (editorialActual.Id == 0)
            {
                var crearDto = new CrearEditorialDto { Nombre = editorialActual.Nombre };
                await EditorialClient.CreateAsync(crearDto);
                successMessage = "Editorial creada exitosamente";
            }
            else
            {
                await EditorialClient.UpdateAsync(editorialActual);
                successMessage = "Editorial actualizada exitosamente";
            }

            CerrarModal();
            await CargarEditoriales();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al guardar editorial: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task EliminarEditorial(int id)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "¿Está seguro de que desea eliminar esta editorial?");
        if (!confirmed) return;

        try
        {
            await EditorialClient.DeleteAsync(id);
            successMessage = "Editorial eliminada exitosamente";
            await CargarEditoriales();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al eliminar editorial: {ex.Message}";
        }
    }
}
