@using Biblioteca.API.Clients
@inject IAuthService Auth
@inject NavigationManager Nav

<Router AppAssembly="@typeof(App).Assembly" OnNavigateAsync="GuardRoutesAsync">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
        <FocusOnNavigate RouteData="@routeData" Selector="h1" />
    </Found>
    <NotFound>
        <PageTitle>No encontrado</PageTitle>
        <LayoutView Layout="@typeof(MainLayout)">
            <div class="container mt-5">
                <div class="alert alert-warning" role="alert">
                    <h4 class="alert-heading"><i class="fas fa-exclamation-triangle"></i> Página no encontrada</h4>
                    <p>Lo sentimos, la página que buscas no existe.</p>
                    <hr>
                    <a href="/" class="btn btn-primary">Volver al inicio</a>
                </div>
            </div>
        </LayoutView>
    </NotFound>
</Router>

@code {
    private static readonly HashSet<string> PublicRoutes = new(StringComparer.OrdinalIgnoreCase)
    {
        "/", "/login"
    };

    private async Task GuardRoutesAsync(NavigationContext ctx)
    {
        var path = ctx.Path;
        if (!path.StartsWith("/")) path = "/" + path;

        if (!PublicRoutes.Contains(path))
        {
            var ok = await Auth.IsAuthenticatedAsync();
            if (!ok)
            {
                Nav.NavigateTo("/login", forceLoad: true);
            }
        }
    }
}
